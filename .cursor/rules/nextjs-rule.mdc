---
description: 
globs: 
alwaysApply: false
---

# Your rule content

You are an expert in MEAN Stack development, focusing on scalable and secure web applications.

Key Principles
- Build modular and maintainable applications.
- Use TypeScript for both frontend and backend for consistency.
- Follow RESTful API design principles.
- Ensure security using best practices (e.g., HTTPS, JWT, CORS).
- Optimize performance across the stack.

TypeScript & Angular
- Define data structures with interfaces for type safety.
- Avoid `any` type; utilize the type system fully.
- Organize files: imports, definition, implementation.
- Use template strings for multi-line literals.
- Utilize optional chaining and nullish coalescing.
- Use standalone components when applicable.
- Leverage Angular's signals system for efficient state management and reactive programming.
- Use the `inject` function for injecting services directly within component, directive, or service logic to reduce boilerplate.

File Naming Conventions
- `*.component.ts` for Components
- `*.service.ts` for Services
- `*.module.ts` for Modules
- `*.directive.ts` for Directives
- `*.pipe.ts` for Pipes
- `*.spec.ts` for Tests
- `*.controller.ts` for Express Controllers
- `*.route.ts` for Express Routes
- All files use kebab-case.

Code Style
- Use single quotes for string literals.
- Indent with 2 spaces.
- Ensure clean code with no trailing whitespace.
- Use `const` for immutable variables.
- Use template strings for string interpolation.

Angular-Specific Guidelines
- Use async pipe for observables in templates.
- Implement lazy loading for feature modules.
- Ensure accessibility with semantic HTML and ARIA labels.
- Utilize deferrable views for optimizing component rendering, deferring non-critical views until necessary.
- Incorporate Angular's signals system to enhance reactive programming and state management efficiency.
- Use the `NgOptimizedImage` directive for efficient image loading, improving performance and preventing broken links.

Node.js & Express
- Organize files for clarity: controllers, routes, models, services.
- Use middleware for reusable logic.
- Implement centralized error handling using middleware.
- Validate inputs with libraries like `joi` or `express-validator`.
- Use environment variables for sensitive data.
- Ensure API responses are consistent with a clear structure.

MongoDB
- Design schemas thoughtfully: normalize or denormalize based on use case.
- Use indexes for frequently queried fields.
- Sanitize user inputs to prevent injection attacks.
- Use Mongoose for schema validation and data modeling.
- Implement pagination with `limit` and `skip`.

Import Order
1. Angular core and common modules
2. RxJS modules
3. Third-party libraries
4. Application core imports
5. Feature-specific modules
6. Environment configurations
7. Relative imports

Error Handling and Validation
- Use proper error handling in services and components.
- Implement custom error types or factories.
- Validate form inputs using Angular validators and backend validation libraries.

Testing
- Follow the Arrange-Act-Assert pattern for tests.
- Test API endpoints with tools like Jest or Mocha.
- Use in-memory databases or mocks for testing database operations.

Performance Optimization
- Optimize `ngFor` with trackBy functions.
- Use pure pipes for expensive computations.
- Avoid direct DOM manipulation; use Angular's templating system.
- Use gzip compression for Express responses.
- Implement caching for static assets and frequent database queries.

Security
- Prevent XSS with Angular's sanitization; avoid using `innerHTML`.
- Use Helmet for secure HTTP headers in Express.
- Implement rate limiting to prevent brute force attacks.
- Sanitize dynamic content with built-in tools.

Key Conventions
- Use Angular's DI system and the `inject` function for service injection.
- Follow RESTful design principles for APIs.
- Focus on reusability and modularity.
- Follow best practices for scalable, secure MEAN stack applications.
- Prioritize optimizing Web Vitals like LCP, INP, and CLS.

Reference
Refer to official documentation for Angular, Node.js, Express, and MongoDB for detailed best practices and guidelines.